#Containers to forward to

upstream transmission {
  server transmission:9091;
}

upstream radarr {
  server radarr:7878;
}

upstream sonarr {
  server sonarr:8989;
}

upstream prowlarr {
  server prowlarr:9696;
}

#Catchall to display static site
server {
    listen 443 ssl;
    http2 on;
    server_name catchall.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      root /usr/share/nginx/html/;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#Transmission
server {
    listen 443 ssl;
    http2 on;
    server_name transmission.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://transmission;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }
    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#radarr
server {
    listen 443 ssl;
    http2 on;
    server_name radarr.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://radarr;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_buffering off;
      proxy_redirect off;
      proxy_http_version 1.1;
    }

    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#sonarr
server {
    listen 443 ssl;
    http2 on;
    server_name sonarr.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://sonarr;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_buffering off;
      proxy_redirect off;
      proxy_http_version 1.1;
    }

    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}

#prowlarr
server {
    listen 443 ssl;
    http2 on;
    server_name prowlarr.example.com;
    include /etc/nginx/conf.d/shared.conf;
    location ^~ / {
      proxy_pass       http://prowlarr;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_buffering off;
      proxy_redirect off;
      proxy_http_version 1.1;
    }

    #Redirect http->https
    if ($https = '') { return 301 https://$host$request_uri; }
}
